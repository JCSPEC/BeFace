{
 "byQName": {
  "Array": {
   "kind": 5,
   "namespace": "",
   "name": "Array",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockNamespace": "Arrays",
    "paramHelp": {},
    "jsDoc": "Add, remove, and replace items in lists.\n\nAdd, remove, and replace items in lists.",
    "block": "Array"
   },
   "pkg": null,
   "extendsTypes": [],
   "retType": "",
   "parameters": null,
   "qName": "Array"
  },
  "Array.length": {
   "kind": 2,
   "namespace": "Array",
   "name": "length",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Array_::length",
    "weight": 84,
    "blockId": "lists_length",
    "block": "length of %VALUE",
    "blockBuiltin": "true",
    "blockNamespace": "arrays",
    "paramHelp": {},
    "jsDoc": "Get or set the length of an array. This number is one more than the index of the last element the array.",
    "_name": "length"
   },
   "pkg": null,
   "retType": "number",
   "parameters": null,
   "qName": "Array.length"
  },
  "Array.push": {
   "kind": 1,
   "namespace": "Array",
   "name": "push",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/push",
    "shim": "Array_::push",
    "weight": 49,
    "blockId": "array_push",
    "block": "%list| add value %value| to end",
    "blockNamespace": "arrays",
    "paramHelp": {
     "items": "New elements of the Array."
    },
    "jsDoc": "Append a new element to an array.",
    "_name": "push"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "item",
     "description": "",
     "type": "T",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "push(null)",
   "qName": "Array.push"
  },
  "Array.pop": {
   "kind": 1,
   "namespace": "Array",
   "name": "pop",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/pop",
    "shim": "Array_::pop",
    "weight": 48,
    "blockId": "array_pop",
    "block": "get and remove last value from %list",
    "blockNamespace": "arrays",
    "paramHelp": {},
    "jsDoc": "Remove the last element from an array and return it.",
    "_name": "pop"
   },
   "pkg": null,
   "retType": "T",
   "parameters": [],
   "snippet": "pop()",
   "qName": "Array.pop"
  },
  "Array.reverse": {
   "kind": 1,
   "namespace": "Array",
   "name": "reverse",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/reverse",
    "helper": "arrayReverse",
    "weight": 10,
    "advanced": true,
    "blockId": "array_reverse",
    "block": "reverse %list",
    "blockNamespace": "arrays",
    "paramHelp": {},
    "jsDoc": "Reverse the elements in an array. The first array element becomes the last, and the last array element becomes the first.",
    "_name": "reverse"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [],
   "snippet": "reverse()",
   "qName": "Array.reverse"
  },
  "Array.shift": {
   "kind": 1,
   "namespace": "Array",
   "name": "shift",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/shift",
    "helper": "arrayShift",
    "weight": 70,
    "advanced": true,
    "blockId": "array_shift",
    "block": "get and remove first value from %list",
    "blockNamespace": "arrays",
    "paramHelp": {},
    "jsDoc": "Remove the first element from an array and return it. This method changes the length of the array.",
    "_name": "shift"
   },
   "pkg": null,
   "retType": "T",
   "parameters": [],
   "snippet": "shift()",
   "qName": "Array.shift"
  },
  "Array.unshift": {
   "kind": 1,
   "namespace": "Array",
   "name": "unshift",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/unshift",
    "helper": "arrayUnshift",
    "weight": 69,
    "advanced": true,
    "blockId": "array_unshift",
    "block": "%list| insert %value| at beginning",
    "blockNamespace": "arrays",
    "paramHelp": {
     "element": "to insert at the start of the Array."
    },
    "jsDoc": "Add one element to the beginning of an array and return the new length of the array.",
    "_name": "unshift"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "value",
     "description": "",
     "type": "T",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "unshift(null)",
   "qName": "Array.unshift"
  },
  "Array.slice": {
   "kind": 1,
   "namespace": "Array",
   "name": "slice",
   "attributes": {
    "paramDefl": {
     "start": "0",
     "end": "0"
    },
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/slice",
    "helper": "arraySlice",
    "weight": 41,
    "advanced": true,
    "blockNamespace": "arrays",
    "paramHelp": {
     "start": "The beginning of the specified portion of the array. eg: 0",
     "end": "The end of the specified portion of the array. eg: 0"
    },
    "jsDoc": "Return a section of an array.",
    "_name": "slice"
   },
   "pkg": null,
   "retType": "T[]",
   "parameters": [
    {
     "name": "start",
     "description": "The beginning of the specified portion of the array. eg: 0",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    },
    {
     "name": "end",
     "description": "The end of the specified portion of the array. eg: 0",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "slice(0, 0)",
   "qName": "Array.slice"
  },
  "Array.splice": {
   "kind": 1,
   "namespace": "Array",
   "name": "splice",
   "attributes": {
    "paramDefl": {
     "start": "0",
     "deleteCount": "0"
    },
    "callingConvention": 0,
    "_source": null,
    "helper": "arraySplice",
    "weight": 40,
    "paramHelp": {
     "start": "The zero-based location in the array from which to start removing elements. eg: 0",
     "deleteCount": "The number of elements to remove. eg: 0"
    },
    "jsDoc": "Remove elements from an array.",
    "_name": "splice"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "start",
     "description": "The zero-based location in the array from which to start removing elements. eg: 0",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    },
    {
     "name": "deleteCount",
     "description": "The number of elements to remove. eg: 0",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "splice(0, 0)",
   "qName": "Array.splice"
  },
  "Array.sort": {
   "kind": 1,
   "namespace": "Array",
   "name": "sort",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "helper": "arraySort",
    "weight": 40,
    "paramHelp": {
     "specifies": "a function that defines the sort order. If omitted, the array is sorted according to the prmitive type"
    },
    "jsDoc": "Sort the elements of an array in place and returns the array. The sort is not necessarily stable.",
    "_name": "sort"
   },
   "pkg": null,
   "retType": "T[]",
   "parameters": [
    {
     "name": "callbackfn",
     "description": "",
     "type": "(value1: T, value2: T) => number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "sort()",
   "qName": "Array.sort"
  },
  "Array.map": {
   "kind": 1,
   "namespace": "Array",
   "name": "map",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "helper": "arrayMap",
    "weight": 40,
    "paramHelp": {
     "callbackfn": "A function that accepts up to two arguments. The map method calls the callbackfn function one time for each element in the array."
    },
    "jsDoc": "Call a defined callback function on each element of an array, and return an array containing the results.",
    "_name": "map"
   },
   "pkg": null,
   "retType": "U[]",
   "parameters": [
    {
     "name": "callbackfn",
     "description": "A function that accepts up to two arguments. The map method calls the callbackfn function one time for each element in the array.",
     "type": "(value: T, index: number) => U",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "map(function () {})",
   "qName": "Array.map"
  },
  "Array.filter": {
   "kind": 1,
   "namespace": "Array",
   "name": "filter",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "helper": "arrayFilter",
    "weight": 40,
    "paramHelp": {
     "callbackfn": "A function that accepts up to two arguments. The filter method calls the callbackfn function one time for each element in the array."
    },
    "jsDoc": "Return the elements of an array that meet the condition specified in a callback function.",
    "_name": "filter"
   },
   "pkg": null,
   "retType": "T[]",
   "parameters": [
    {
     "name": "callbackfn",
     "description": "A function that accepts up to two arguments. The filter method calls the callbackfn function one time for each element in the array.",
     "type": "(value: T, index: number) => boolean",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "filter(function () {})",
   "qName": "Array.filter"
  },
  "Array.reduce": {
   "kind": 1,
   "namespace": "Array",
   "name": "reduce",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "helper": "arrayReduce",
    "weight": 40,
    "paramHelp": {
     "callbackfn": "A function that accepts up to three arguments. The reduce method calls the callbackfn function one time for each element in the array.",
     "initialValue": "Initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value."
    },
    "jsDoc": "Call the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
    "_name": "reduce"
   },
   "pkg": null,
   "retType": "U",
   "parameters": [
    {
     "name": "callbackfn",
     "description": "A function that accepts up to three arguments. The reduce method calls the callbackfn function one time for each element in the array.",
     "type": "(previousValue: U, currentValue: T, currentIndex: number) => U",
     "options": {},
     "isEnum": false
    },
    {
     "name": "initialValue",
     "description": "Initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
     "type": "U",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "reduce(function () {}, null)",
   "qName": "Array.reduce"
  },
  "Array.removeElement": {
   "kind": 1,
   "namespace": "Array",
   "name": "removeElement",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Array_::removeElement",
    "weight": 48,
    "paramHelp": {},
    "jsDoc": "Remove the first occurence of an object. Returns true if removed.",
    "_name": "removeElement"
   },
   "pkg": null,
   "retType": "boolean",
   "parameters": [
    {
     "name": "element",
     "description": "",
     "type": "T",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "removeElement(null)",
   "qName": "Array.removeElement"
  },
  "Array.removeAt": {
   "kind": 1,
   "namespace": "Array",
   "name": "removeAt",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/remove-at",
    "shim": "Array_::removeAt",
    "weight": 49,
    "advanced": true,
    "blockId": "array_removeat",
    "block": "%list| remove value at %index",
    "blockNamespace": "arrays",
    "paramHelp": {},
    "jsDoc": "Remove the element at a certain index.",
    "_name": "removeAt"
   },
   "pkg": null,
   "retType": "T",
   "parameters": [
    {
     "name": "index",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "removeAt(0)",
   "qName": "Array.removeAt"
  },
  "Array.insertAt": {
   "kind": 1,
   "namespace": "Array",
   "name": "insertAt",
   "attributes": {
    "paramDefl": {
     "index": "0",
     "the": "0"
    },
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/insert-at",
    "shim": "Array_::insertAt",
    "weight": 84,
    "advanced": true,
    "blockId": "array_insertAt",
    "block": "%list| insert at %index| value %value",
    "blockNamespace": "arrays",
    "paramHelp": {
     "index": "the zero-based position in the list to insert the value, eg: 0",
     "the": "value to insert, eg: 0"
    },
    "jsDoc": "Insert the value at a particular index, increases length by 1",
    "_name": "insertAt"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "index",
     "description": "the zero-based position in the list to insert the value, eg: 0",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    },
    {
     "name": "value",
     "description": "",
     "type": "T",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "insertAt(0, null)",
   "qName": "Array.insertAt"
  },
  "Array.indexOf": {
   "kind": 1,
   "namespace": "Array",
   "name": "indexOf",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/index-of",
    "shim": "Array_::indexOf",
    "weight": 50,
    "advanced": true,
    "blockId": "array_indexof",
    "block": "%list| find index of %value",
    "blockNamespace": "arrays",
    "paramHelp": {
     "item": "The value to locate in the array.",
     "fromIndex": "The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0."
    },
    "jsDoc": "Return the index of the first occurrence of a value in an array.",
    "_name": "indexOf"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "item",
     "description": "The value to locate in the array.",
     "type": "T",
     "options": {},
     "isEnum": false
    },
    {
     "name": "fromIndex",
     "description": "The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "indexOf(null)",
   "qName": "Array.indexOf"
  },
  "Array.get": {
   "kind": 1,
   "namespace": "Array",
   "name": "get",
   "attributes": {
    "paramDefl": {
     "index": "0"
    },
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/get",
    "shim": "Array_::getAt",
    "weight": 85,
    "paramHelp": {
     "index": "the zero-based position in the list of the item, eg: 0"
    },
    "jsDoc": "Get the value at a particular index",
    "_name": "get"
   },
   "pkg": null,
   "retType": "T",
   "parameters": [
    {
     "name": "index",
     "description": "the zero-based position in the list of the item, eg: 0",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "get(0)",
   "qName": "Array.get"
  },
  "Array.set": {
   "kind": 1,
   "namespace": "Array",
   "name": "set",
   "attributes": {
    "paramDefl": {
     "index": "0",
     "the": "0"
    },
    "callingConvention": 0,
    "_source": null,
    "help": "arrays/set",
    "shim": "Array_::setAt",
    "weight": 84,
    "paramHelp": {
     "index": "the zero-based position in the list to store the value, eg: 0",
     "the": "value to insert, eg: 0"
    },
    "jsDoc": "Store a value at a particular index",
    "_name": "set"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "index",
     "description": "the zero-based position in the list to store the value, eg: 0",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    },
    {
     "name": "value",
     "description": "",
     "type": "T",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "set(0, null)",
   "qName": "Array.set"
  },
  "String": {
   "kind": 5,
   "namespace": "",
   "name": "String",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "blockNamespace": "Text",
    "paramHelp": {},
    "jsDoc": "Combine, split, and search text strings.\n\nCombine, split, and search text strings.",
    "block": "String"
   },
   "pkg": null,
   "extendsTypes": [],
   "retType": "",
   "parameters": null,
   "qName": "String"
  },
  "String.concat": {
   "kind": 1,
   "namespace": "String",
   "name": "concat",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "String_::concat",
    "weight": 49,
    "blockId": "string_concat",
    "blockNamespace": "text",
    "paramHelp": {
     "other": "The string to append to the end of the string."
    },
    "jsDoc": "Returns a string that contains the concatenation of two or more strings.",
    "_name": "concat"
   },
   "pkg": null,
   "retType": "string",
   "parameters": [
    {
     "name": "other",
     "description": "The string to append to the end of the string.",
     "type": "string",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "concat(\"\")",
   "qName": "String.concat"
  },
  "String.charAt": {
   "kind": 1,
   "namespace": "String",
   "name": "charAt",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "String_::charAt",
    "weight": 48,
    "help": "text/char-at",
    "blockId": "string_get",
    "block": "char from %this=text|at %pos",
    "blockNamespace": "text",
    "paramHelp": {
     "index": "The zero-based index of the desired character."
    },
    "jsDoc": "Return the character at the specified index.",
    "_name": "charAt"
   },
   "pkg": null,
   "retType": "string",
   "parameters": [
    {
     "name": "index",
     "description": "The zero-based index of the desired character.",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "charAt(0)",
   "qName": "String.charAt"
  },
  "String.length": {
   "kind": 2,
   "namespace": "String",
   "name": "length",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "property": "true",
    "shim": "String_::length",
    "weight": 47,
    "blockId": "text_length",
    "block": "length of %VALUE",
    "blockBuiltin": "true",
    "blockNamespace": "text",
    "paramHelp": {},
    "jsDoc": "Returns the length of a String object.",
    "_name": "length"
   },
   "pkg": null,
   "retType": "number",
   "parameters": null,
   "qName": "String.length"
  },
  "String.charCodeAt": {
   "kind": 1,
   "namespace": "String",
   "name": "charCodeAt",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "String_::charCodeAt",
    "paramHelp": {
     "index": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
    },
    "jsDoc": "Return the Unicode value of the character at the specified location.",
    "_name": "charCodeAt"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "index",
     "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "charCodeAt(0)",
   "qName": "String.charCodeAt"
  },
  "String.compare": {
   "kind": 1,
   "namespace": "String",
   "name": "compare",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "String_::compare",
    "help": "text/compare",
    "blockId": "string_compare",
    "block": "compare %this=text| to %that",
    "blockNamespace": "text",
    "paramHelp": {
     "that": "String to compare to target string"
    },
    "jsDoc": "See how the order of characters in two strings is different (in ASCII encoding).",
    "_name": "compare"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "that",
     "description": "String to compare to target string",
     "type": "string",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "compare(\"\")",
   "qName": "String.compare"
  },
  "String.substr": {
   "kind": 1,
   "namespace": "String",
   "name": "substr",
   "attributes": {
    "paramDefl": {
     "length": "1000000",
     "start": "0"
    },
    "callingConvention": 0,
    "_source": null,
    "shim": "String_::substr",
    "help": "text/substr",
    "blockId": "string_substr",
    "block": "substring of %this=text|from %start|of length %length",
    "blockNamespace": "text",
    "paramHelp": {
     "start": "first character index; can be negative from counting from the end, eg:0",
     "length": "number of characters to extract"
    },
    "jsDoc": "Return a substring of the current string.",
    "_name": "substr"
   },
   "pkg": null,
   "retType": "string",
   "parameters": [
    {
     "name": "start",
     "description": "first character index; can be negative from counting from the end, eg:0",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    },
    {
     "name": "length",
     "description": "number of characters to extract",
     "type": "number",
     "initializer": "1000000",
     "default": "1000000",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "substr(0)",
   "qName": "String.substr"
  },
  "String.isEmpty": {
   "kind": 1,
   "namespace": "String",
   "name": "isEmpty",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "String_::isEmpty",
    "blockId": "string_isempty",
    "blockNamespace": "text",
    "paramHelp": {},
    "jsDoc": "Returns a value indicating if the string is empty",
    "_name": "isEmpty"
   },
   "pkg": null,
   "retType": "boolean",
   "parameters": [],
   "snippet": "isEmpty()",
   "qName": "String.isEmpty"
  },
  "parseInt": {
   "kind": 3,
   "namespace": "",
   "name": "parseInt",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "String_::toNumber",
    "help": "text/parse-int",
    "blockId": "string_parseint",
    "block": "parse to integer %text",
    "blockNamespace": "text",
    "paramHelp": {
     "s": "A string to convert into a number."
    },
    "jsDoc": "Convert a string to an integer.",
    "_name": "parseInt"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "text",
     "description": "",
     "type": "string",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "parseInt(\"\")",
   "qName": "parseInt"
  },
  "Object": {
   "kind": 9,
   "namespace": "",
   "name": "Object",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Object"
   },
   "pkg": null,
   "extendsTypes": [],
   "retType": "Object",
   "parameters": null,
   "qName": "Object"
  },
  "Function": {
   "kind": 9,
   "namespace": "",
   "name": "Function",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Function"
   },
   "pkg": null,
   "extendsTypes": [],
   "retType": "Function",
   "parameters": null,
   "qName": "Function"
  },
  "IArguments": {
   "kind": 9,
   "namespace": "",
   "name": "IArguments",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "IArguments"
   },
   "pkg": null,
   "extendsTypes": [],
   "retType": "IArguments",
   "parameters": null,
   "qName": "IArguments"
  },
  "RegExp": {
   "kind": 9,
   "namespace": "",
   "name": "RegExp",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "RegExp"
   },
   "pkg": null,
   "extendsTypes": [],
   "retType": "RegExp",
   "parameters": null,
   "qName": "RegExp"
  },
  "Boolean": {
   "kind": 9,
   "namespace": "",
   "name": "Boolean",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Boolean"
   },
   "pkg": null,
   "extendsTypes": [],
   "retType": "Boolean",
   "parameters": null,
   "qName": "Boolean"
  },
  "Boolean.toString": {
   "kind": 1,
   "namespace": "Boolean",
   "name": "toString",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Boolean_::toString",
    "paramHelp": {},
    "jsDoc": "Returns a string representation of an object.",
    "_name": "toString"
   },
   "pkg": null,
   "retType": "string",
   "parameters": [],
   "snippet": "toString()",
   "qName": "Boolean.toString"
  },
  "String.fromCharCode": {
   "kind": 3,
   "namespace": "String",
   "name": "fromCharCode",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "math/string-from-char-code",
    "shim": "String_::fromCharCode",
    "weight": 1,
    "blockNamespace": "Math",
    "blockId": "stringFromCharCode",
    "block": "text from char code %code",
    "paramHelp": {},
    "jsDoc": "Make a string from the given ASCII character code.",
    "_name": "fromCharCode"
   },
   "pkg": null,
   "retType": "string",
   "parameters": [
    {
     "name": "code",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "fromCharCode(0)",
   "qName": "String.fromCharCode"
  },
  "Number": {
   "kind": 9,
   "namespace": "",
   "name": "Number",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Number"
   },
   "pkg": null,
   "extendsTypes": [],
   "retType": "Number",
   "parameters": null,
   "qName": "Number"
  },
  "Number.toString": {
   "kind": 1,
   "namespace": "Number",
   "name": "toString",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Number_::toString",
    "paramHelp": {},
    "jsDoc": "Returns a string representation of a number.",
    "_name": "toString"
   },
   "pkg": null,
   "retType": "string",
   "parameters": [],
   "snippet": "toString()",
   "qName": "Number.toString"
  },
  "Math": {
   "kind": 5,
   "namespace": "",
   "name": "Math",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "More complex operations with numbers.",
    "block": "Math"
   },
   "pkg": null,
   "retType": "",
   "parameters": null,
   "qName": "Math"
  },
  "Math.pow": {
   "kind": 3,
   "namespace": "Math",
   "name": "pow",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::pow",
    "paramHelp": {
     "x": "The base value of the expression.",
     "y": "The exponent value of the expression."
    },
    "jsDoc": "Returns the value of a base expression taken to a specified power.",
    "_name": "pow"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "The base value of the expression.",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "y",
     "description": "The exponent value of the expression.",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "pow(0, 0)",
   "qName": "Math.pow"
  },
  "Math.random": {
   "kind": 3,
   "namespace": "Math",
   "name": "random",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::random",
    "helpUrl": "/reference/math/random",
    "paramHelp": {},
    "jsDoc": "Returns a pseudorandom number between 0 and 1.",
    "_name": "random"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [],
   "snippet": "random()",
   "qName": "Math.random"
  },
  "Math.randomRange": {
   "kind": 3,
   "namespace": "Math",
   "name": "randomRange",
   "attributes": {
    "paramDefl": {
     "min": "0",
     "max": "10"
    },
    "callingConvention": 0,
    "_source": null,
    "blockId": "device_random",
    "block": "pick random %min|to %limit",
    "helpUrl": "/reference/math/random-range",
    "shim": "Math_::randomRange",
    "paramHelp": {
     "min": "the lower inclusive bound, eg: 0",
     "max": "the upper inclusive bound, eg: 10"
    },
    "jsDoc": "Returns a pseudorandom number between min and max included. \nIf both numbers are integral, the result is integral.",
    "_name": "randomRange"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "min",
     "description": "the lower inclusive bound, eg: 0",
     "type": "number",
     "initializer": "0",
     "default": "0",
     "options": {},
     "isEnum": false
    },
    {
     "name": "max",
     "description": "the upper inclusive bound, eg: 10",
     "type": "number",
     "initializer": "10",
     "default": "10",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "randomRange(0, 10)",
   "qName": "Math.randomRange"
  },
  "Math.log": {
   "kind": 3,
   "namespace": "Math",
   "name": "log",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::log",
    "paramHelp": {
     "x": "A number"
    },
    "jsDoc": "Returns the natural logarithm (base e) of a number.",
    "_name": "log"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "A number",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "log(0)",
   "qName": "Math.log"
  },
  "Math.exp": {
   "kind": 3,
   "namespace": "Math",
   "name": "exp",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::exp",
    "paramHelp": {
     "x": "A number"
    },
    "jsDoc": "Returns returns ``e^x``.",
    "_name": "exp"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "A number",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "exp(0)",
   "qName": "Math.exp"
  },
  "Math.sin": {
   "kind": 3,
   "namespace": "Math",
   "name": "sin",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::sin",
    "paramHelp": {
     "x": "An angle in radians"
    },
    "jsDoc": "Returns the sine of a number.",
    "_name": "sin"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "An angle in radians",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "sin(0)",
   "qName": "Math.sin"
  },
  "Math.cos": {
   "kind": 3,
   "namespace": "Math",
   "name": "cos",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::cos",
    "paramHelp": {
     "x": "An angle in radians"
    },
    "jsDoc": "Returns the cosine of a number.",
    "_name": "cos"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "An angle in radians",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "cos(0)",
   "qName": "Math.cos"
  },
  "Math.tan": {
   "kind": 3,
   "namespace": "Math",
   "name": "tan",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::tan",
    "paramHelp": {
     "x": "An angle in radians"
    },
    "jsDoc": "Returns the tangent of a number.",
    "_name": "tan"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "An angle in radians",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "tan(0)",
   "qName": "Math.tan"
  },
  "Math.asin": {
   "kind": 3,
   "namespace": "Math",
   "name": "asin",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::asin",
    "paramHelp": {
     "x": "A number"
    },
    "jsDoc": "Returns the arcsine (in radians) of a number",
    "_name": "asin"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "A number",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "asin(0)",
   "qName": "Math.asin"
  },
  "Math.acos": {
   "kind": 3,
   "namespace": "Math",
   "name": "acos",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::acos",
    "paramHelp": {
     "x": "A number"
    },
    "jsDoc": "Returns the arccosine (in radians) of a number",
    "_name": "acos"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "A number",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "acos(0)",
   "qName": "Math.acos"
  },
  "Math.atan": {
   "kind": 3,
   "namespace": "Math",
   "name": "atan",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::atan",
    "paramHelp": {
     "x": "A number"
    },
    "jsDoc": "Returns the arctangent (in radians) of a number",
    "_name": "atan"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "A number",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "atan(0)",
   "qName": "Math.atan"
  },
  "Math.atan2": {
   "kind": 3,
   "namespace": "Math",
   "name": "atan2",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::atan2",
    "paramHelp": {
     "y": "A number",
     "x": "A number"
    },
    "jsDoc": "Returns the arctangent of the quotient of its arguments.",
    "_name": "atan2"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "y",
     "description": "A number",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "x",
     "description": "A number",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "atan2(0, 0)",
   "qName": "Math.atan2"
  },
  "Math.sqrt": {
   "kind": 3,
   "namespace": "Math",
   "name": "sqrt",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::sqrt",
    "paramHelp": {
     "x": "A numeric expression."
    },
    "jsDoc": "Returns the square root of a number.",
    "_name": "sqrt"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "A numeric expression.",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "sqrt(0)",
   "qName": "Math.sqrt"
  },
  "Math.ceil": {
   "kind": 3,
   "namespace": "Math",
   "name": "ceil",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::ceil",
    "paramHelp": {
     "x": "A numeric expression."
    },
    "jsDoc": "Returns the smallest number greater than or equal to its numeric argument.",
    "_name": "ceil"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "A numeric expression.",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "ceil(0)",
   "qName": "Math.ceil"
  },
  "Math.floor": {
   "kind": 3,
   "namespace": "Math",
   "name": "floor",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::floor",
    "paramHelp": {
     "x": "A numeric expression."
    },
    "jsDoc": "Returns the greatest number less than or equal to its numeric argument.",
    "_name": "floor"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "A numeric expression.",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "floor(0)",
   "qName": "Math.floor"
  },
  "Math.trunc": {
   "kind": 3,
   "namespace": "Math",
   "name": "trunc",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::trunc",
    "paramHelp": {
     "x": "A numeric expression."
    },
    "jsDoc": "Returns the number with the decimal part truncated.",
    "_name": "trunc"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "A numeric expression.",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "trunc(0)",
   "qName": "Math.trunc"
  },
  "Math.round": {
   "kind": 3,
   "namespace": "Math",
   "name": "round",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::round",
    "paramHelp": {
     "x": "The value to be rounded to the nearest number."
    },
    "jsDoc": "Returns a supplied numeric expression rounded to the nearest number.",
    "_name": "round"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "The value to be rounded to the nearest number.",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "round(0)",
   "qName": "Math.round"
  },
  "Math.imul": {
   "kind": 3,
   "namespace": "Math",
   "name": "imul",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::imul",
    "paramHelp": {
     "x": "The first number",
     "y": "The second number"
    },
    "jsDoc": "Returns the value of integer signed 32 bit multiplication of two numbers.",
    "_name": "imul"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "The first number",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "y",
     "description": "The second number",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "imul(0, 0)",
   "qName": "Math.imul"
  },
  "Math.idiv": {
   "kind": 3,
   "namespace": "Math",
   "name": "idiv",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "Math_::idiv",
    "paramHelp": {
     "x": "The first number",
     "y": "The second number"
    },
    "jsDoc": "Returns the value of integer signed 32 bit division of two numbers.",
    "_name": "idiv"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "The first number",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "y",
     "description": "The second number",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "idiv(0, 0)",
   "qName": "Math.idiv"
  },
  "helpers": {
   "kind": 5,
   "namespace": "",
   "name": "helpers",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "helpers"
   },
   "pkg": null,
   "retType": "",
   "parameters": null,
   "qName": "helpers"
  },
  "helpers.arraySplice": {
   "kind": 3,
   "namespace": "helpers",
   "name": "arraySplice",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "arraySplice"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "arr",
     "description": "",
     "type": "T[]",
     "options": {},
     "isEnum": false
    },
    {
     "name": "start",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "len",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "arraySplice([], 0, 0)",
   "qName": "helpers.arraySplice"
  },
  "helpers.arrayReverse": {
   "kind": 3,
   "namespace": "helpers",
   "name": "arrayReverse",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "arrayReverse"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "arr",
     "description": "",
     "type": "T[]",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "arrayReverse([])",
   "qName": "helpers.arrayReverse"
  },
  "helpers.arrayShift": {
   "kind": 3,
   "namespace": "helpers",
   "name": "arrayShift",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "arrayShift"
   },
   "pkg": null,
   "retType": "T",
   "parameters": [
    {
     "name": "arr",
     "description": "",
     "type": "T[]",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "arrayShift([])",
   "qName": "helpers.arrayShift"
  },
  "helpers.arrayUnshift": {
   "kind": 3,
   "namespace": "helpers",
   "name": "arrayUnshift",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "arrayUnshift"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "arr",
     "description": "",
     "type": "T[]",
     "options": {},
     "isEnum": false
    },
    {
     "name": "value",
     "description": "",
     "type": "T",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "arrayUnshift([], null)",
   "qName": "helpers.arrayUnshift"
  },
  "helpers.arraySort": {
   "kind": 3,
   "namespace": "helpers",
   "name": "arraySort",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "arraySort"
   },
   "pkg": null,
   "retType": "T[]",
   "parameters": [
    {
     "name": "arr",
     "description": "",
     "type": "T[]",
     "options": {},
     "isEnum": false
    },
    {
     "name": "callbackfn",
     "description": "",
     "type": "(value1: T, value2: T) => number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "arraySort([])",
   "qName": "helpers.arraySort"
  },
  "helpers.arrayMap": {
   "kind": 3,
   "namespace": "helpers",
   "name": "arrayMap",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "arrayMap"
   },
   "pkg": null,
   "retType": "U[]",
   "parameters": [
    {
     "name": "arr",
     "description": "",
     "type": "T[]",
     "options": {},
     "isEnum": false
    },
    {
     "name": "callbackfn",
     "description": "",
     "type": "(value: T, index: number) => U",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "arrayMap([], function () {})",
   "qName": "helpers.arrayMap"
  },
  "helpers.arrayFilter": {
   "kind": 3,
   "namespace": "helpers",
   "name": "arrayFilter",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "arrayFilter"
   },
   "pkg": null,
   "retType": "T[]",
   "parameters": [
    {
     "name": "arr",
     "description": "",
     "type": "T[]",
     "options": {},
     "isEnum": false
    },
    {
     "name": "callbackfn",
     "description": "",
     "type": "(value: T, index: number) => boolean",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "arrayFilter([], function () {})",
   "qName": "helpers.arrayFilter"
  },
  "helpers.arrayReduce": {
   "kind": 3,
   "namespace": "helpers",
   "name": "arrayReduce",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "arrayReduce"
   },
   "pkg": null,
   "retType": "U",
   "parameters": [
    {
     "name": "arr",
     "description": "",
     "type": "T[]",
     "options": {},
     "isEnum": false
    },
    {
     "name": "callbackfn",
     "description": "",
     "type": "(previousValue: U, currentValue: T, currentIndex: number) => U",
     "options": {},
     "isEnum": false
    },
    {
     "name": "initialValue",
     "description": "",
     "type": "U",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "arrayReduce([], function () {}, null)",
   "qName": "helpers.arrayReduce"
  },
  "helpers.arraySlice": {
   "kind": 3,
   "namespace": "helpers",
   "name": "arraySlice",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "arraySlice"
   },
   "pkg": null,
   "retType": "T[]",
   "parameters": [
    {
     "name": "arr",
     "description": "",
     "type": "T[]",
     "options": {},
     "isEnum": false
    },
    {
     "name": "start",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "end",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "arraySlice([], 0, 0)",
   "qName": "helpers.arraySlice"
  },
  "Math.clamp": {
   "kind": 3,
   "namespace": "Math",
   "name": "clamp",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "clamp"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "min",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "max",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "value",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "clamp(0, 0, 0)",
   "qName": "Math.clamp"
  },
  "Math.abs": {
   "kind": 3,
   "namespace": "Math",
   "name": "abs",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {
     "x": "A numeric expression for which the absolute value is needed."
    },
    "jsDoc": "Returns the absolute value of a number (the value without regard to whether it is positive or negative).\nFor example, the absolute value of -5 is the same as the absolute value of 5.",
    "_name": "abs"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "A numeric expression for which the absolute value is needed.",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "abs(0)",
   "qName": "Math.abs"
  },
  "Math.sign": {
   "kind": 3,
   "namespace": "Math",
   "name": "sign",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {
     "x": "The numeric expression to test"
    },
    "jsDoc": "Returns the sign of the x, indicating whether x is positive, negative or zero.",
    "_name": "sign"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "x",
     "description": "The numeric expression to test",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "sign(0)",
   "qName": "Math.sign"
  },
  "Math.max": {
   "kind": 3,
   "namespace": "Math",
   "name": "max",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "Returns the larger of two supplied numeric expressions.",
    "_name": "max"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "a",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "b",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "max(0, 0)",
   "qName": "Math.max"
  },
  "Math.min": {
   "kind": 3,
   "namespace": "Math",
   "name": "min",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "Returns the smaller of two supplied numeric expressions.",
    "_name": "min"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [
    {
     "name": "a",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    },
    {
     "name": "b",
     "description": "",
     "type": "number",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "min(0, 0)",
   "qName": "Math.min"
  },
  "Sentiment": {
   "kind": 6,
   "namespace": "",
   "name": "Sentiment",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "Enum for emotions",
    "_name": "Sentiment"
   },
   "pkg": null,
   "retType": "Sentiment",
   "parameters": null,
   "qName": "Sentiment"
  },
  "Sentiment.Happy": {
   "kind": 7,
   "namespace": "Sentiment",
   "name": "Happy",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "happy",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Happy"
   },
   "pkg": null,
   "retType": "Sentiment",
   "parameters": null,
   "qName": "Sentiment.Happy"
  },
  "Sentiment.Sad": {
   "kind": 7,
   "namespace": "Sentiment",
   "name": "Sad",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "sad",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Sad"
   },
   "pkg": null,
   "retType": "Sentiment",
   "parameters": null,
   "qName": "Sentiment.Sad"
  },
  "Sentiment.Surprised": {
   "kind": 7,
   "namespace": "Sentiment",
   "name": "Surprised",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "surprised",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Surprised"
   },
   "pkg": null,
   "retType": "Sentiment",
   "parameters": null,
   "qName": "Sentiment.Surprised"
  },
  "Sentiment.Fear": {
   "kind": 7,
   "namespace": "Sentiment",
   "name": "Fear",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "fear",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Fear"
   },
   "pkg": null,
   "retType": "Sentiment",
   "parameters": null,
   "qName": "Sentiment.Fear"
  },
  "Sentiment.Disgusted": {
   "kind": 7,
   "namespace": "Sentiment",
   "name": "Disgusted",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "disgusted",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Disgusted"
   },
   "pkg": null,
   "retType": "Sentiment",
   "parameters": null,
   "qName": "Sentiment.Disgusted"
  },
  "Sentiment.Angry": {
   "kind": 7,
   "namespace": "Sentiment",
   "name": "Angry",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "angry",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Angry"
   },
   "pkg": null,
   "retType": "Sentiment",
   "parameters": null,
   "qName": "Sentiment.Angry"
  },
  "LeftRight": {
   "kind": 6,
   "namespace": "",
   "name": "LeftRight",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "Enum for lean left / right",
    "_name": "LeftRight"
   },
   "pkg": null,
   "retType": "LeftRight",
   "parameters": null,
   "qName": "LeftRight"
  },
  "LeftRight.Left": {
   "kind": 7,
   "namespace": "LeftRight",
   "name": "Left",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "left",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Left"
   },
   "pkg": null,
   "retType": "LeftRight",
   "parameters": null,
   "qName": "LeftRight.Left"
  },
  "LeftRight.Right": {
   "kind": 7,
   "namespace": "LeftRight",
   "name": "Right",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "right",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Right"
   },
   "pkg": null,
   "retType": "LeftRight",
   "parameters": null,
   "qName": "LeftRight.Right"
  },
  "DefaultStatus": {
   "kind": 6,
   "namespace": "",
   "name": "DefaultStatus",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "Default status of all detector",
    "_name": "DefaultStatus"
   },
   "pkg": null,
   "retType": "DefaultStatus",
   "parameters": null,
   "qName": "DefaultStatus"
  },
  "DefaultStatus.ValueHolder": {
   "kind": 7,
   "namespace": "DefaultStatus",
   "name": "ValueHolder",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "ValueHolder"
   },
   "pkg": null,
   "retType": "DefaultStatus",
   "parameters": null,
   "qName": "DefaultStatus.ValueHolder"
  },
  "MouthStatus": {
   "kind": 6,
   "namespace": "",
   "name": "MouthStatus",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "Enum for eye status",
    "_name": "MouthStatus"
   },
   "pkg": null,
   "retType": "MouthStatus",
   "parameters": null,
   "qName": "MouthStatus"
  },
  "MouthStatus.Open": {
   "kind": 7,
   "namespace": "MouthStatus",
   "name": "Open",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "open",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Open"
   },
   "pkg": null,
   "retType": "MouthStatus",
   "parameters": null,
   "qName": "MouthStatus.Open"
  },
  "MouthStatus.Close": {
   "kind": 7,
   "namespace": "MouthStatus",
   "name": "Close",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "close",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Close"
   },
   "pkg": null,
   "retType": "MouthStatus",
   "parameters": null,
   "qName": "MouthStatus.Close"
  },
  "Gender": {
   "kind": 6,
   "namespace": "",
   "name": "Gender",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "Enum for gender",
    "_name": "Gender"
   },
   "pkg": null,
   "retType": "Gender",
   "parameters": null,
   "qName": "Gender"
  },
  "Gender.Male": {
   "kind": 7,
   "namespace": "Gender",
   "name": "Male",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "male",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Male"
   },
   "pkg": null,
   "retType": "Gender",
   "parameters": null,
   "qName": "Gender.Male"
  },
  "Gender.Female": {
   "kind": 7,
   "namespace": "Gender",
   "name": "Female",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "female",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "Female"
   },
   "pkg": null,
   "retType": "Gender",
   "parameters": null,
   "qName": "Gender.Female"
  },
  "maskType": {
   "kind": 6,
   "namespace": "",
   "name": "maskType",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "Enum for MASKS",
    "_name": "maskType"
   },
   "pkg": null,
   "retType": "maskType",
   "parameters": null,
   "qName": "maskType"
  },
  "maskType.ironman": {
   "kind": 7,
   "namespace": "maskType",
   "name": "ironman",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "ironman"
   },
   "pkg": null,
   "retType": "maskType",
   "parameters": null,
   "qName": "maskType.ironman"
  },
  "maskType.average": {
   "kind": 7,
   "namespace": "maskType",
   "name": "average",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "average"
   },
   "pkg": null,
   "retType": "maskType",
   "parameters": null,
   "qName": "maskType.average"
  },
  "maskType.monalisa": {
   "kind": 7,
   "namespace": "maskType",
   "name": "monalisa",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "monalisa"
   },
   "pkg": null,
   "retType": "maskType",
   "parameters": null,
   "qName": "maskType.monalisa"
  },
  "maskType.sean_connery": {
   "kind": 7,
   "namespace": "maskType",
   "name": "sean_connery",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "sean_connery"
   },
   "pkg": null,
   "retType": "maskType",
   "parameters": null,
   "qName": "maskType.sean_connery"
  },
  "maskType.skull": {
   "kind": 7,
   "namespace": "maskType",
   "name": "skull",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "skull"
   },
   "pkg": null,
   "retType": "maskType",
   "parameters": null,
   "qName": "maskType.skull"
  },
  "maskType.audrey": {
   "kind": 7,
   "namespace": "maskType",
   "name": "audrey",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "audrey"
   },
   "pkg": null,
   "retType": "maskType",
   "parameters": null,
   "qName": "maskType.audrey"
  },
  "maskType.nicolas_cage": {
   "kind": 7,
   "namespace": "maskType",
   "name": "nicolas_cage",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "nicolas_cage"
   },
   "pkg": null,
   "retType": "maskType",
   "parameters": null,
   "qName": "maskType.nicolas_cage"
  },
  "faceSubType": {
   "kind": 6,
   "namespace": "",
   "name": "faceSubType",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "Enum for Face substitution",
    "_name": "faceSubType"
   },
   "pkg": null,
   "retType": "faceSubType",
   "parameters": null,
   "qName": "faceSubType"
  },
  "faceSubType.average": {
   "kind": 7,
   "namespace": "faceSubType",
   "name": "average",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "average"
   },
   "pkg": null,
   "retType": "faceSubType",
   "parameters": null,
   "qName": "faceSubType.average"
  },
  "faceSubType.terminator": {
   "kind": 7,
   "namespace": "faceSubType",
   "name": "terminator",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "terminator"
   },
   "pkg": null,
   "retType": "faceSubType",
   "parameters": null,
   "qName": "faceSubType.terminator"
  },
  "faceSubType.walter": {
   "kind": 7,
   "namespace": "faceSubType",
   "name": "walter",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "walter"
   },
   "pkg": null,
   "retType": "faceSubType",
   "parameters": null,
   "qName": "faceSubType.walter"
  },
  "faceSubType.clooney": {
   "kind": 7,
   "namespace": "faceSubType",
   "name": "clooney",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "clooney"
   },
   "pkg": null,
   "retType": "faceSubType",
   "parameters": null,
   "qName": "faceSubType.clooney"
  },
  "faceSubType.bieber": {
   "kind": 7,
   "namespace": "faceSubType",
   "name": "bieber",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "bieber"
   },
   "pkg": null,
   "retType": "faceSubType",
   "parameters": null,
   "qName": "faceSubType.bieber"
  },
  "faceSubType.kim": {
   "kind": 7,
   "namespace": "faceSubType",
   "name": "kim",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "kim"
   },
   "pkg": null,
   "retType": "faceSubType",
   "parameters": null,
   "qName": "faceSubType.kim"
  },
  "faceSubType.rihanna": {
   "kind": 7,
   "namespace": "faceSubType",
   "name": "rihanna",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "rihanna"
   },
   "pkg": null,
   "retType": "faceSubType",
   "parameters": null,
   "qName": "faceSubType.rihanna"
  },
  "faceSubType.audrey": {
   "kind": 7,
   "namespace": "faceSubType",
   "name": "audrey",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "audrey"
   },
   "pkg": null,
   "retType": "faceSubType",
   "parameters": null,
   "qName": "faceSubType.audrey"
  },
  "faceSubType.bill": {
   "kind": 7,
   "namespace": "faceSubType",
   "name": "bill",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "bill"
   },
   "pkg": null,
   "retType": "faceSubType",
   "parameters": null,
   "qName": "faceSubType.bill"
  },
  "faceSubType.connery": {
   "kind": 7,
   "namespace": "faceSubType",
   "name": "connery",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "connery"
   },
   "pkg": null,
   "retType": "faceSubType",
   "parameters": null,
   "qName": "faceSubType.connery"
  },
  "faceSubType.cage": {
   "kind": 7,
   "namespace": "faceSubType",
   "name": "cage",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "cage"
   },
   "pkg": null,
   "retType": "faceSubType",
   "parameters": null,
   "qName": "faceSubType.cage"
  },
  "faceSubType.queen": {
   "kind": 7,
   "namespace": "faceSubType",
   "name": "queen",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "queen"
   },
   "pkg": null,
   "retType": "faceSubType",
   "parameters": null,
   "qName": "faceSubType.queen"
  },
  "faceSubType.obama": {
   "kind": 7,
   "namespace": "faceSubType",
   "name": "obama",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "obama"
   },
   "pkg": null,
   "retType": "faceSubType",
   "parameters": null,
   "qName": "faceSubType.obama"
  },
  "faceSubType.chuck": {
   "kind": 7,
   "namespace": "faceSubType",
   "name": "chuck",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "chuck"
   },
   "pkg": null,
   "retType": "faceSubType",
   "parameters": null,
   "qName": "faceSubType.chuck"
  },
  "faceSubType.monalisa": {
   "kind": 7,
   "namespace": "faceSubType",
   "name": "monalisa",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "monalisa"
   },
   "pkg": null,
   "retType": "faceSubType",
   "parameters": null,
   "qName": "faceSubType.monalisa"
  },
  "faceSubType.scream": {
   "kind": 7,
   "namespace": "faceSubType",
   "name": "scream",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "scream"
   },
   "pkg": null,
   "retType": "faceSubType",
   "parameters": null,
   "qName": "faceSubType.scream"
  },
  "faceDeform": {
   "kind": 6,
   "namespace": "",
   "name": "faceDeform",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "faceDeform"
   },
   "pkg": null,
   "retType": "faceDeform",
   "parameters": null,
   "qName": "faceDeform"
  },
  "faceDeform.unwell": {
   "kind": 7,
   "namespace": "faceDeform",
   "name": "unwell",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "unwell"
   },
   "pkg": null,
   "retType": "faceDeform",
   "parameters": null,
   "qName": "faceDeform.unwell"
  },
  "faceDeform.inca": {
   "kind": 7,
   "namespace": "faceDeform",
   "name": "inca",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "inca"
   },
   "pkg": null,
   "retType": "faceDeform",
   "parameters": null,
   "qName": "faceDeform.inca"
  },
  "faceDeform.cheery": {
   "kind": 7,
   "namespace": "faceDeform",
   "name": "cheery",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "cheery"
   },
   "pkg": null,
   "retType": "faceDeform",
   "parameters": null,
   "qName": "faceDeform.cheery"
  },
  "faceDeform.dopey": {
   "kind": 7,
   "namespace": "faceDeform",
   "name": "dopey",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "dopey"
   },
   "pkg": null,
   "retType": "faceDeform",
   "parameters": null,
   "qName": "faceDeform.dopey"
  },
  "faceDeform.longface": {
   "kind": 7,
   "namespace": "faceDeform",
   "name": "longface",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "longface"
   },
   "pkg": null,
   "retType": "faceDeform",
   "parameters": null,
   "qName": "faceDeform.longface"
  },
  "faceDeform.lucky": {
   "kind": 7,
   "namespace": "faceDeform",
   "name": "lucky",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "lucky"
   },
   "pkg": null,
   "retType": "faceDeform",
   "parameters": null,
   "qName": "faceDeform.lucky"
  },
  "faceDeform.overcute": {
   "kind": 7,
   "namespace": "faceDeform",
   "name": "overcute",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "overcute"
   },
   "pkg": null,
   "retType": "faceDeform",
   "parameters": null,
   "qName": "faceDeform.overcute"
  },
  "faceDeform.aloof": {
   "kind": 7,
   "namespace": "faceDeform",
   "name": "aloof",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "aloof"
   },
   "pkg": null,
   "retType": "faceDeform",
   "parameters": null,
   "qName": "faceDeform.aloof"
  },
  "gaming": {
   "kind": 5,
   "namespace": "",
   "name": "gaming",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "weight": 100,
    "block": "Gaming",
    "color": "#E87B21",
    "icon": "",
    "paramHelp": {},
    "jsDoc": "The gamming effect apis"
   },
   "pkg": null,
   "retType": "",
   "parameters": null,
   "qName": "gaming"
  },
  "gaming.onBallDrop": {
   "kind": 3,
   "namespace": "gaming",
   "name": "onBallDrop",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "weight": 100,
    "blockId": "onballdrop",
    "block": "on ball drop",
    "shim": "gaming::onBallDrop",
    "paramHelp": {},
    "jsDoc": "Drop ball",
    "_name": "onBallDrop"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "handler",
     "description": "",
     "type": "() => void",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "onBallDrop(function () {})",
   "qName": "gaming.onBallDrop"
  },
  "detector": {
   "kind": 5,
   "namespace": "",
   "name": "detector",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "weight": 100,
    "block": "Face Detector",
    "color": "#5B0621",
    "icon": "",
    "paramHelp": {},
    "jsDoc": "The detector apis"
   },
   "pkg": null,
   "retType": "",
   "parameters": null,
   "qName": "detector"
  },
  "detector.onSentiment": {
   "kind": 3,
   "namespace": "detector",
   "name": "onSentiment",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "weight": 100,
    "blockId": "onsentiment",
    "block": "on sentiment %sentiment",
    "shim": "detector::onSentiment",
    "paramHelp": {
     "handler": ""
    },
    "jsDoc": "Act on sentiment\n* @param sentiment",
    "_name": "onSentiment"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "sentiment",
     "description": "",
     "type": "Sentiment",
     "options": {},
     "isEnum": true
    },
    {
     "name": "handler",
     "description": "",
     "type": "() => void",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "onSentiment(null, function () {})",
   "qName": "detector.onSentiment"
  },
  "detector.onGender": {
   "kind": 3,
   "namespace": "detector",
   "name": "onGender",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "weight": 100,
    "blockId": "ongender",
    "block": "on gender %gender",
    "shim": "detector::onGender",
    "paramHelp": {
     "handler": ""
    },
    "jsDoc": "Act on sentiment\n* @param gender",
    "_name": "onGender"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "gender",
     "description": "",
     "type": "Gender",
     "options": {},
     "isEnum": true
    },
    {
     "name": "handler",
     "description": "",
     "type": "() => void",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "onGender(null, function () {})",
   "qName": "detector.onGender"
  },
  "detector.onMouthStatus": {
   "kind": 3,
   "namespace": "detector",
   "name": "onMouthStatus",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "weight": 100,
    "blockId": "onmouthstatus",
    "block": "on mouth %mouthStatus",
    "shim": "detector::onMouthStatus",
    "paramHelp": {
     "hander": ""
    },
    "jsDoc": "Act on mouth open or close\n* @param mouthStatus",
    "_name": "onMouthStatus"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "mouthStatus",
     "description": "",
     "type": "MouthStatus",
     "options": {},
     "isEnum": true
    },
    {
     "name": "handler",
     "description": "",
     "type": "() => void",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "onMouthStatus(null, function () {})",
   "qName": "detector.onMouthStatus"
  },
  "detector.detectSentiment": {
   "kind": 3,
   "namespace": "detector",
   "name": "detectSentiment",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "detector::detectSentiment",
    "paramHelp": {},
    "jsDoc": "Detect sentiment",
    "_name": "detectSentiment"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [],
   "snippet": "detectSentiment()",
   "qName": "detector.detectSentiment"
  },
  "detector.detectMouthStatus": {
   "kind": 3,
   "namespace": "detector",
   "name": "detectMouthStatus",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "detector::detectMouthStatus",
    "paramHelp": {},
    "jsDoc": "Detect MouthStatus",
    "_name": "detectMouthStatus"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [],
   "snippet": "detectMouthStatus()",
   "qName": "detector.detectMouthStatus"
  },
  "detector.detectGender": {
   "kind": 3,
   "namespace": "detector",
   "name": "detectGender",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "detector::detectGender",
    "paramHelp": {},
    "jsDoc": "Detect Gender",
    "_name": "detectGender"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [],
   "snippet": "detectGender()",
   "qName": "detector.detectGender"
  },
  "detector.faceLean": {
   "kind": 3,
   "namespace": "detector",
   "name": "faceLean",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "weight": 100,
    "blockId": "isFaceLeanLeft",
    "block": "face lean %leftRight",
    "shim": "detector::faceLean",
    "paramHelp": {},
    "jsDoc": "isFaceLeanLeft\n* @param leftRight",
    "_name": "faceLean"
   },
   "pkg": null,
   "retType": "boolean",
   "parameters": [
    {
     "name": "leftRight",
     "description": "",
     "type": "LeftRight",
     "options": {},
     "isEnum": true
    }
   ],
   "snippet": "faceLean(null)",
   "qName": "detector.faceLean"
  },
  "detector.getFaceXPosition": {
   "kind": 3,
   "namespace": "detector",
   "name": "getFaceXPosition",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "weight": 100,
    "blockId": "getFaceHorizontalPosition",
    "block": "get face horizontal position",
    "shim": "detector::getFaceXPosition",
    "paramHelp": {},
    "jsDoc": "get face center X position",
    "_name": "getFaceXPosition"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [],
   "snippet": "getFaceXPosition()",
   "qName": "detector.getFaceXPosition"
  },
  "detector.getFaceYPosition": {
   "kind": 3,
   "namespace": "detector",
   "name": "getFaceYPosition",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "weight": 100,
    "blockId": "getFaceVerticalPosition",
    "block": "get face vertical position",
    "shim": "detector::getFaceYPosition",
    "paramHelp": {},
    "jsDoc": "get face center Y position",
    "_name": "getFaceYPosition"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [],
   "snippet": "getFaceYPosition()",
   "qName": "detector.getFaceYPosition"
  },
  "detector.getTrackingConvergence": {
   "kind": 3,
   "namespace": "detector",
   "name": "getTrackingConvergence",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "block": "Get Tracking Convergence",
    "blockId": "get_track_conv",
    "weight": 90,
    "shim": "detector::getTrackingConvergence",
    "paramHelp": {},
    "jsDoc": "",
    "_name": "getTrackingConvergence"
   },
   "pkg": null,
   "retType": "number",
   "parameters": [],
   "snippet": "getTrackingConvergence()",
   "qName": "detector.getTrackingConvergence"
  },
  "augmentedReality": {
   "kind": 5,
   "namespace": "",
   "name": "augmentedReality",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "weight": 100,
    "block": "Augmented Reality",
    "color": "#3891a6",
    "icon": "",
    "paramHelp": {},
    "jsDoc": "The special effect apis"
   },
   "pkg": null,
   "retType": "",
   "parameters": null,
   "qName": "augmentedReality"
  },
  "augmentedReality.drawFaceOutline": {
   "kind": 3,
   "namespace": "augmentedReality",
   "name": "drawFaceOutline",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 2,
    "_source": null,
    "weight": 90,
    "block": "draw face outline",
    "blockId": "face_outline",
    "shim": "augmentedReality::drawFaceOutlineAsync",
    "promise": "true",
    "paramHelp": {},
    "jsDoc": "Draw face outline",
    "_name": "drawFaceOutline"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [],
   "snippet": "drawFaceOutline()",
   "qName": "augmentedReality.drawFaceOutline"
  },
  "augmentedReality.drawFaceDeformation": {
   "kind": 3,
   "namespace": "augmentedReality",
   "name": "drawFaceDeformation",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 2,
    "_source": null,
    "block": "deform face %deform",
    "blockId": "face_deform",
    "weight": 50,
    "shim": "augmentedReality::drawFaceDeformationAsync",
    "promise": "true",
    "paramHelp": {},
    "jsDoc": "Draw deformation",
    "_name": "drawFaceDeformation"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "deform",
     "description": "",
     "type": "faceDeform",
     "options": {},
     "isEnum": true
    }
   ],
   "snippet": "drawFaceDeformation(null)",
   "qName": "augmentedReality.drawFaceDeformation"
  },
  "augmentedReality.drawMasks": {
   "kind": 3,
   "namespace": "augmentedReality",
   "name": "drawMasks",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 2,
    "_source": null,
    "weight": 90,
    "block": "draw mask %mask",
    "blockId": "face_mask",
    "shim": "augmentedReality::drawMasksAsync",
    "promise": "true",
    "paramHelp": {},
    "jsDoc": "Add MASKS to faces",
    "_name": "drawMasks"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "mask",
     "description": "",
     "type": "maskType",
     "options": {},
     "isEnum": true
    }
   ],
   "snippet": "drawMasks(null)",
   "qName": "augmentedReality.drawMasks"
  },
  "augmentedReality.faceSubstitutionLoop": {
   "kind": 3,
   "namespace": "augmentedReality",
   "name": "faceSubstitutionLoop",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 2,
    "_source": null,
    "weight": 90,
    "block": "face substitution %face",
    "blockId": "face_sub",
    "shim": "augmentedReality::faceSubstitutionLoopAsync",
    "promise": "true",
    "paramHelp": {},
    "jsDoc": "Face substitution",
    "_name": "faceSubstitutionLoop"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "face",
     "description": "",
     "type": "faceSubType",
     "options": {},
     "isEnum": true
    }
   ],
   "snippet": "faceSubstitutionLoop(null)",
   "qName": "augmentedReality.faceSubstitutionLoop"
  },
  "loops": {
   "kind": 5,
   "namespace": "",
   "name": "loops",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "loops",
    "block": "loops"
   },
   "pkg": null,
   "retType": "",
   "parameters": null,
   "qName": "loops"
  },
  "loops.forever": {
   "kind": 3,
   "namespace": "loops",
   "name": "forever",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "help": "functions/forever",
    "weight": 55,
    "blockGap": "8",
    "blockId": "device_forever",
    "block": "forever",
    "shim": "loops::forever",
    "paramHelp": {
     "body": "the code to repeat"
    },
    "jsDoc": "Repeats the code forever in the background. On each iteration, allows other code to run.",
    "_name": "forever"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "body",
     "description": "the code to repeat",
     "type": "() => void",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "forever(function () {})",
   "qName": "loops.forever"
  },
  "loops.pause": {
   "kind": 3,
   "namespace": "loops",
   "name": "pause",
   "attributes": {
    "paramDefl": {
     "ms": "100"
    },
    "callingConvention": 2,
    "_source": null,
    "help": "functions/pause",
    "weight": 54,
    "block": "pause (ms) %pause",
    "blockId": "device_pause",
    "shim": "loops::pauseAsync",
    "promise": "true",
    "paramHelp": {
     "ms": "how long to pause for, eg: 100, 200, 500, 1000, 2000"
    },
    "jsDoc": "Pause for the specified time in milliseconds",
    "_name": "pause"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "ms",
     "description": "how long to pause for, eg: 100, 200, 500, 1000, 2000",
     "type": "number",
     "initializer": "100",
     "default": "100",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "pause(100)",
   "qName": "loops.pause"
  },
  "console": {
   "kind": 5,
   "namespace": "",
   "name": "console",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "paramHelp": {},
    "jsDoc": "",
    "_name": "console",
    "block": "console"
   },
   "pkg": null,
   "retType": "",
   "parameters": null,
   "qName": "console"
  },
  "console.log": {
   "kind": 3,
   "namespace": "console",
   "name": "log",
   "attributes": {
    "paramDefl": {},
    "callingConvention": 0,
    "_source": null,
    "shim": "console::log",
    "paramHelp": {},
    "jsDoc": "Print out message",
    "_name": "log"
   },
   "pkg": null,
   "retType": "void",
   "parameters": [
    {
     "name": "msg",
     "description": "",
     "type": "string",
     "options": {},
     "isEnum": false
    }
   ],
   "snippet": "log(\"\")",
   "qName": "console.log"
  }
 }
}